import{_ as n,o as s,c as a,a as e}from"./app-b5630a42.js";const t={},o=e(`<h1 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> class</h1><p>👩🏻‍💻十三月   🕰️ 2022-07-28</p><h3 id="含义" tabindex="-1"><a class="header-anchor" href="#含义" aria-hidden="true">#</a> 含义</h3><p><code>class</code>是一种用于创建对象的语法题，它提供了一种更简洁和面向对象的方式来定义和使用对象。使用<code>class</code>关键字可以定义一个类，类是一种模板或蓝图，描述了对象的属性和方法。类可以看做是对象的构造函数，通过实例化可以创建对象。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><ul><li>创建对象：使用<code>class</code>可以方便的创建对象，尤其是需要创建多个具有相同属性和方法的对象时。</li><li>封装代码：<code>class</code>提供了一种封装代码的方式，将相关的属性和方法阻止在一起，使代码更加清晰和可维护。</li><li>继承和多态：<code>class</code>支持继承和多态的特性，可以通过继承来扩展已有的类，并通过多态来实现不同类的统一接口。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
	<span class="token punctuation">}</span>
	<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I&#39;m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Hello, my name is Alice and I&#39;m 18 years old.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h3><p>在上面的示例中，我们定义了一个<code>Person</code>类，他有两个属性<code>name</code>和<code>age</code>，和一个方法<code>sayHello</code>。通过<code>class</code>关键字和<code>constructor</code>方法，定义了类的构造函数和属性。在构造函数中，使用<code>this</code>关键字来引用当前实例对象。</p>`,10),c=[o];function p(l,i){return s(),a("div",null,c)}const d=n(t,[["render",p],["__file","class.html.vue"]]);export{d as default};
