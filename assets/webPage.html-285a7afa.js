import{_ as i,o as e,c as a,e as r,a as l}from"./app-b5630a42.js";const t="/yjj-blog/assets/webPage-63bbc74c.jpg",n="/yjj-blog/assets/dns-b836091f.png",p="/yjj-blog/assets/render-50200e39.png",h={},d=l('<h1 id="一个网页从输入网址到打开-中间经历了哪些步骤" tabindex="-1"><a class="header-anchor" href="#一个网页从输入网址到打开-中间经历了哪些步骤" aria-hidden="true">#</a> 一个网页从输入网址到打开，中间经历了哪些步骤？</h1><p>👩🏻‍💻十三月   🕰️ 2023-09-04</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>从输入url回车后发生的行为如下：</p><ol><li>URL解析</li><li>DNS查询</li><li>TCP连接</li><li>HTTP请求</li><li>响应请求</li><li>页面渲染</li></ol>',5),s=l('<h2 id="详细分析" tabindex="-1"><a class="header-anchor" href="#详细分析" aria-hidden="true">#</a> 详细分析</h2><h3 id="url解析" tabindex="-1"><a class="header-anchor" href="#url解析" aria-hidden="true">#</a> URL解析</h3><p>首先判断你输入的是一个合法的url还是一个待搜索的关键词，并且根据你输入的内容进行对应操作。</p><p>一个url的结构解析如下：</p><p>协议 + 域名 + 端口 + 路径 + 查询字符串 + 锚点链接</p><p><img src="'+t+'" alt="url结构解析"></p><h3 id="dns查询" tabindex="-1"><a class="header-anchor" href="#dns查询" aria-hidden="true">#</a> DNS查询</h3><ol><li><p>DNS是什么</p><p>DNS，域名系统，是互联网一项服务，是进行域名和与之相应的IP地址进行转换的服务器。</p><p>简单来理解，DNS相当于一个翻译官，负责将域名翻译为Ip地址</p><ul><li>IP地址：一长串能够唯一标识网络上的计算机的数字</li><li>域名：是由一串用点分割的名字组成的Internet上某一台计算机或者计算机组的名称，用于在数据传输时对计算机的定位标识</li></ul></li><li><p>域名</p><p>域名是一个具有层次的结构，从上到下依次为根域名，顶级域名，二级域名。。。 在域名的每一层都会有一个域名服务器，此外还有电脑默认的本地域名服务器。</p></li><li><p>查询方式</p><ul><li>递归查询: 如果A请求B，那么B作为请求的接收者一定要给A想要的答案</li><li>迭代查询：如果接收者B没有请求者A所需要的准确内容，接收者B讲告诉请求者A，如何去获取这个内容，但是自己并不去发出请求</li></ul></li><li><p>域名缓存</p><p>在域名服务器解析的时候，使用缓存保存域名和IP地址的映射。 计算机中DNS的记录也分为了两种缓存方式：</p><ul><li>浏览器缓存</li><li>操作系统缓存</li></ul></li><li><p>查询过程</p><ul><li>首先搜索浏览器的DNS缓存，缓存中维护一张域名与IP地址的对应表</li><li>若没有命中，则继续搜索操作系统的DNS缓存</li><li>若依然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的DNS缓存，查找成功则返回结果</li><li>若本地域名服务器的DNS缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询 <ul><li>首先本地域名服务器向根域名服务器发起请求，根域名服务器返回顶级域名服务器的地址给本地域名服务器</li><li>本地域名服务器拿到这个顶级域名服务器的地址后，就向其发起请求，获取权限域名服务器的地址</li><li>本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的IP地址</li></ul></li><li>本地域名服务器将对得到的IP地址返回给操作系统，同时自己将IP地址缓存起来</li><li>操作系统将IP地址返回给浏览器，同时自己也将IP地址缓存起来</li><li>至此，浏览器就得到了域名对应的IP地址，并将IP地址缓存起来 <img src="'+n+'" alt="Alt text"></li></ul></li></ol><h3 id="tcp连接" tabindex="-1"><a class="header-anchor" href="#tcp连接" aria-hidden="true">#</a> TCP连接</h3><p>TCP是一种面向有连接的传输层协议，</p><p>在确定目标服务器的IP地址后，经历三次握手简历TCP连接</p><h3 id="发送http请求" tabindex="-1"><a class="header-anchor" href="#发送http请求" aria-hidden="true">#</a> 发送http请求</h3><p>当建立TCP连接后，就可以在这基础上进行通信，浏览器发送http请求到目标服务器。</p><p>请求的内容包括：</p><ul><li>请求行</li><li>请求头</li><li>请求主体</li></ul><h3 id="响应请求" tabindex="-1"><a class="header-anchor" href="#响应请求" aria-hidden="true">#</a> 响应请求</h3><p>当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，包括：</p><ul><li>状态行</li><li>响应头</li><li>响应正文</li></ul><p>当页面关闭之后，TCP连接则会经过四次挥手完全断开</p><h3 id="页面渲染" tabindex="-1"><a class="header-anchor" href="#页面渲染" aria-hidden="true">#</a> 页面渲染</h3><p>当浏览器接收到服务器响应的资源后，首先会对资源进行解析：</p><ul><li>查看响应头的信息，根据不同的指示做相应处理，比如重定向，缓存资源等等</li><li>查看响应头的Content-Type的值，根据不同的资源类型采用不同的解析方式</li></ul><p>关于页面的渲染过程如下：</p><ul><li>解析HTML，构建DOM树</li><li>解析CSS，生成CSS规则树</li><li>合并DOM树和CSS规则，生成render树</li><li>布局render树（Layout/reflow），负责各元素尺寸，位置的计算</li><li>绘制render树（paint），绘制页面像素信息</li><li>浏览器会将各层的信息发送给GPU,GPU会将各层合成，显示在屏幕上 <img src="'+p+'" alt="Alt text"></li></ul>',24);function c(o,u){return e(),a("div",null,[d,r(` 个人最初的浅显分析

1. url解析

2. DNS解析

3. TCP请求  三次握手，四次挥手

4. 页面的请求数据，先请求head里面的，一般是css，再渲染body内的内容，再渲染页面body下面的script中的js `),s])}const _=i(h,[["render",c],["__file","webPage.html.vue"]]);export{_ as default};
